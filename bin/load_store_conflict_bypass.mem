1110_00111010_0000_0011_0000_0000_0001  // 02: MOV R3, #1  Initial Address
1110_00111010_0000_0000_0000_0001_0000  // 00: MOV R0, #16  Initial Address
1110_00111010_0000_0010_0000_0000_0100  // 01: MOV R2, #4  Initial Address
1110_00111010_0000_0001_0000_0000_1000  // 02: MOV R1, #8  Initial Address
1110_01001001_0000_0010_0000_0000_0000  // 03: LDR R2, [R0, #0]  does R2 = MEM[R0] = 16
1110_01001000_0010_0001_0000_0000_0010  // 04: STR R1, [R2, #2]  does MEM[R2 + 2] = R1 = 8 
1110_01001001_0010_0101_0000_0000_0010  // 05: LDR R5, [R2, #2]  does R5 = MEM[R2 + 2] = 8
1110_00001000_0101_0101_00000_00_0_0011 // 10: ADD R5, R5, R3 - > 9
1110_00001000_0101_0101_00000_00_0_0011 // 10: ADD R5, R5, R3  -> A
1110_00000001_0101_0101_00000_00_0_0101 // 5C: AND R5,R5,R5 -> A
1110_00000001_0101_0101_00000_00_0_0101 // 5C: AND R5,R5,R5 -> A
1110_00000001_0101_0101_00000_00_0_0101 // 5C: AND R5,R5,R5 -> A
1110_00000001_0101_0101_00000_00_0_0101 // 5C: AND R5,R5,R5 -> A
1110_00000001_0101_0101_00000_00_0_0101 // 5C: AND R5,R5,R5 -> A
1110_00000001_0101_0101_00000_00_0_0101 // 5C: AND R5,R5,R5 -> A
1110_1011_0000_0000_0000_0000_0000_1000 // BL 8
1110_00111010_0000_0000_0000_0000_0001  // 00: MOV R0, #1  Initial Address < Next on return
1110_01001001_0000_0010_0000_0000_0000  // 40: LDR R2, [R0, #0]  
1110_00001000_0010_0010_00000_00_0_0010 // 10: ADD R2, R2, R2 
1110_00001000_0010_0010_00000_00_0_0010 // 10: ADD R2, R2, R2 
1110_00001000_0010_0010_00000_00_0_0010 // 10: ADD R2, R2, R2 
1110_00001000_0010_0010_00000_00_0_0010 // 10: ADD R2, R2, R2
1110_00001000_0010_0010_00000_00_0_0010 // 10: ADD R2, R2, R2 
1110_00001000_0010_0010_00000_00_0_0010 // 10: ADD R2, R2, R2 ----  
1110_00000001_0010_0010_00000_00_0_0010 // 5C: AND R2, R2, R2
1110_00000001_0010_0010_00000_00_0_0010 // 5C: AND R2, R2, R2 < Branch and Links to here
1110_00000001_0010_0010_00000_00_0_0010 // 5C: AND R2, R2, R2
1110_00000001_0010_0010_00000_00_0_0010 // 5C: AND R2, R2, R2
1110_00000001_0010_0010_00000_00_0_0010 // 5C: AND R2, R2, R2
1110_00000001_0010_0010_00000_00_0_0010 // 5C: AND R2, R2, R2
1110_00000001_0010_0010_00000_00_0_0010 // 5C: AND R2, R2, R2
1110_00000001_0010_0010_00000_00_0_0010 // 5C: AND R2, R2, R2
1110_0001_0010_1111_1111_1111_0001_1110 // RET = BX R14
1110_00000001_0010_0010_00000_00_0_0010 // 5C: AND R2, R2, R2
1110_00000001_0010_0010_00000_00_0_0010 // 5C: AND R2, R2, R2
1110_00000001_0010_0010_00000_00_0_0010 // 5C: AND R2, R2, R2
