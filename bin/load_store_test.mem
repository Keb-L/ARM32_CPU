//
// This test will move the values at mem addr 16 to 20 (16 - 20) 
// to mem addr 0 to 4 
//
1110_00111010_0000_0000_0000_0001_0000  // 00: MOV R0, #16  Initial Address
1110_00111010_0000_0001_0000_0000_0001  // 04: MOV R1, #1
1110_00111010_0000_0010_0000_0001_0100  // 08: MOV R2, #20  Stop Address
1110_00111010_0000_0011_0000_0000_0000  // 08: MOV R3, #0  
1111_1111_1111_1111_1111_1111_1111_1111 // 10: Do nothing
1110_01001001_0000_1000_0000_0000_0000  // 14: LDR R8, R0 
1110_00001000_0000_0000_00000_00_0_0001 // 18: ADD R0, R0, R1 -> R0 = R0 + R1 
1110_01000000_0000_1000_0000_0001_0000  // 28: STR R8, [R0, #-16]
1111_1111_1111_1111_1111_1111_1111_1111 // 1C: Do nothing
1111_1111_1111_1111_1111_1111_1111_1111 // 20: Do nothing
1110_00000000_1000_1000_00000_00_0_1000 // 2C: AND R8,R8,R8
1110_00010101_0000_0000_00000_00_0_0010 // 30: CMP R0, R2
0000_1010_0000_0000_0000_0000_0000_0010 // 34: B(eq) +2
1110_1010_1111_1111_1111_1111_1111_0101 // 38: B -11
1111_1111_1111_1111_1111_1111_1111_1111 // 3C: Do nothing
1111_1111_1111_1111_1111_1111_1111_1111 // 3C: Do nothing
1111_1111_1111_1111_1111_1111_1111_1111 // 3C: Do nothing
1111_1111_1111_1111_1111_1111_1111_1111 // 3C: Do nothing
1110_01001001_0000_0000_0000_0000_0000  // 40: LDR R0, [R3, #0] 
1110_01001001_0000_0001_0000_0000_0001  // 44: LDR R1, [R3, #1] 
1110_01001001_0000_0010_0000_0000_0010  // 48: LDR R2, [R3, #2] 
1110_01001001_0000_0011_0000_0000_0011  // 4C: LDR R3, [R3, #3] 
1110_01001001_0000_0100_0000_0000_0100  // 50: LDR R4, [R3, #4]
1110_00000001_0000_0000_00000_00_0_0000 // 54: AND R0,R0,R0
1110_00000001_0001_0001_00000_00_0_0001 // 58: AND R1,R1,R1
1110_00000001_0010_0010_00000_00_0_0010 // 5C: AND R2,R2,R2
1110_00000001_0011_0011_00000_00_0_0011 // 60: AND R3,R3,R3
1110_00000001_0100_0100_00000_00_0_0100 // 64: AND R4,R4,R4
1110_00000001_0000_0000_00000_00_0_0000 // 54: AND R0,R0,R0
1110_00000001_0001_0001_00000_00_0_0001 // 58: AND R1,R1,R1
1110_00000001_0010_0010_00000_00_0_0010 // 5C: AND R2,R2,R2
1110_00000001_0011_0011_00000_00_0_0011 // 60: AND R3,R3,R3
1110_00000001_0100_0100_00000_00_0_0100 // 64: AND R4,R4,R4
1110_00000001_0000_0000_00000_00_0_0000 // 54: AND R0,R0,R0
1110_00000001_0001_0001_00000_00_0_0001 // 58: AND R1,R1,R1
1110_00000001_0010_0010_00000_00_0_0010 // 5C: AND R2,R2,R2
1110_00000001_0011_0011_00000_00_0_0011 // 60: AND R3,R3,R3
1110_00000001_0100_0100_00000_00_0_0100 // 64: AND R4,R4,R4
1110_00000001_0000_0000_00000_00_0_0000 // 54: AND R0,R0,R0
1110_00000001_0001_0001_00000_00_0_0001 // 58: AND R1,R1,R1
1110_00000001_0010_0010_00000_00_0_0010 // 5C: AND R2,R2,R2
1110_00000001_0011_0011_00000_00_0_0011 // 60: AND R3,R3,R3
1110_00000001_0100_0100_00000_00_0_0100 // 64: AND R4,R4,R4
1110_00000001_0000_0000_00000_00_0_0000 // 54: AND R0,R0,R0
1110_00000001_0001_0001_00000_00_0_0001 // 58: AND R1,R1,R1
1110_00000001_0010_0010_00000_00_0_0010 // 5C: AND R2,R2,R2
1110_00000001_0011_0011_00000_00_0_0011 // 60: AND R3,R3,R3
1110_00000001_0100_0100_00000_00_0_0100 // 64: AND R4,R4,R4
